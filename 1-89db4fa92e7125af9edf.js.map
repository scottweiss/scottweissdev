{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/components/search.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["SEO","_ref","description","lang","meta","keywords","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","Search","props","_this","_Component","call","this","getOrCreateIndex","index","Index","load","searchIndex","search","evt","query","target","value","setState","results","expand","map","ref","documentStore","getDoc","state","render","react_default","placeholder","type","onChange","page","key","id","gatsby_browser_entry","to","path","tags","Component","Header","siteTitle","search_Search","siteSearchIndex","_4279699837","Layout","children","Fragment","header","Date","getFullYear","_755544856","node"],"mappings":"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","file":"1-89db4fa92e7125af9edf.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React, { Component } from \"react\"\nimport { Index } from \"elasticlunr\"\nimport {  Link } from \"gatsby\"\n// Search component\nexport default class Search extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: ``,\n      results: [],\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input placeholder=\"Search\" type=\"text\" value={this.state.query} onChange={this.search} />\n        <ul>\n          {this.state.results.map(page => (\n            <li key={page.id}>\n\n              <Link to={\"/\" + page.path}>{page.title}</Link>\n              {\": \" + page.tags.join(`,`)}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n  getOrCreateIndex = () =>\n    this.index\n      ? this.index\n      : // Create an elastic lunr index and hydrate with graphql query results\n        Index.load(this.props.searchIndex)\n\n  search = evt => {\n    const query = evt.target.value\n    this.index = this.getOrCreateIndex()\n    this.setState({\n      query,\n      // Query the index with search string to get an [] of IDs\n      results: this.index\n        .search(query, {expand: true})\n        // Map over each ID and return the full document\n        .map(({ ref }) => this.index.documentStore.getDoc(ref)),\n    })\n  }\n}\n","import { StaticQuery, Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Search from \"./search\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <div>\n    <h1 >\n        <Link\n          to=\"/\"\n          \n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    <div>  <StaticQuery\n    query={graphql`\n      query SearchIndexQuery {\n        siteSearchIndex {\n          index\n        }\n        \n\n      }\n    `}\n    render={data => (\n  \n        <Search searchIndex={data.siteSearchIndex.index} />\n   \n    )}\n  /></div>\n      \n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n// import \"./layout.scss\"\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Scott Weiss\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}