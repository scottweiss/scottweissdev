{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","_ref","data","a","createElement","title","keywords","allMarkdownRemark","edges","map","post","key","node","id","to","frontmatter","path","className","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","Header","siteTitle","react_default","gatsby_browser_entry","Layout","children","query","render","Fragment","header","Date","getFullYear","_755544856"],"mappings":"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","file":"component---src-pages-index-js-6dc13d5a24c506d7c75d.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { graphql } from 'gatsby'\n\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\n// import Accordion from \"../components/accordion\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({data}) => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n\n\n    <ul>\n    {data.allMarkdownRemark.edges.map(post => (\n        <li key={post.node.id}>\n         <Link \n         to={post.node.frontmatter.path} className=\"hello\">\n            <div className=\"blog preview\">{post.node.frontmatter.title}</div>\n          </Link>\n        </li>\n      ))}\n    </ul>\n\n\n  </Layout>\n)\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 10\n      sort: { fields: [frontmatter___date], order: DESC}\n      filter: { frontmatter: { published: {eq: true}}}\n\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            path\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const typeQuery = graphql`\n//   query TypeQuery {\n//    allMarkdownRemark(limit: 2000) {\n//       group(field: frontmatter___type) {\n//         fieldValue\n//         totalCount\n//       }\n//     }\n//   }\n// `\n\nexport default IndexPage\n\n\n\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n  \n  >\n    <div\n      \n    >\n      <h1 >\n        <Link\n          to=\"/\"\n          \n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n// import \"./layout.scss\"\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Scott Weiss\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}