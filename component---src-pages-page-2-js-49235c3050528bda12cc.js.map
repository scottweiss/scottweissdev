{"version":3,"sources":["webpack:///./src/pages/page-2.js","webpack:///./src/components/seo.js","webpack:///./src/components/search.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","SecondPage","a","createElement","title","to","SEO","_ref","description","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","Search","props","_this","_Component","call","this","getOrCreateIndex","index","Index","load","searchIndex","search","evt","query","target","value","setState","results","expand","map","ref","documentStore","getDoc","state","render","react_default","placeholder","type","onChange","page","key","id","gatsby_browser_entry","path","tags","Component","Header","siteTitle","search_Search","siteSearchIndex","_4279699837","Layout","children","Fragment","header","Date","getFullYear","_755544856","node"],"mappings":"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","file":"component---src-pages-page-2-js-49235c3050528bda12cc.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage = () => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React, { Component } from \"react\"\nimport { Index } from \"elasticlunr\"\nimport {  Link } from \"gatsby\"\n// Search component\nexport default class Search extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: ``,\n      results: [],\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input placeholder=\"Search\" type=\"text\" value={this.state.query} onChange={this.search} />\n        <ul>\n          {this.state.results.map(page => (\n            <li key={page.id}>\n\n              <Link to={ page.path}>{page.title}</Link>\n              {\": \" + page.tags.join(`,`)}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n  getOrCreateIndex = () =>\n    this.index\n      ? this.index\n      : // Create an elastic lunr index and hydrate with graphql query results\n        Index.load(this.props.searchIndex)\n\n  search = evt => {\n    const query = evt.target.value\n    this.index = this.getOrCreateIndex()\n    this.setState({\n      query,\n      // Query the index with search string to get an [] of IDs\n      results: this.index\n        .search(query, {expand: true})\n        // Map over each ID and return the full document\n        .map(({ ref }) => this.index.documentStore.getDoc(ref)),\n    })\n  }\n}\n","import { StaticQuery, Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Search from \"./search\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <div>\n    <h1 >\n        <Link\n          to=\"/\"\n          \n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    <div>  <StaticQuery\n    query={graphql`\n      query SearchIndexQuery {\n        siteSearchIndex {\n          index\n        }\n        \n\n      }\n    `}\n    render={data => (\n  \n        <Search searchIndex={data.siteSearchIndex.index} />\n   \n    )}\n  /></div>\n      \n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n// import \"./layout.scss\"\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Scott Weiss\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}